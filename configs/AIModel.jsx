const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const codeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

export const genAICode = model.startChat({
  generationConfig: codeGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "generate todo app\n\nGenerate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production."},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"projectTitle\": \"React Todo App with Tailwind CSS\",\n  \"explanation\": \"This React Todo App provides a clean and intuitive interface for managing tasks. It's built with Tailwind CSS for styling and leverages the lucide-react library for icons, enhancing the user experience with visual cues. The application allows users to add, edit, and delete tasks, marking them as complete or incomplete. The app structure is organized into components for better maintainability and scalability.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TodoList from './components/TodoList';\\nimport TodoForm from './components/TodoForm';\\nimport { Trash, Edit, Check, X, Plus } from 'lucide-react';\\nimport { format } from 'date-fns';\\nimport './App.css';\\n\\nfunction App() {\\n  const [todos, setTodos] = useState(() => {\\n    const storedTodos = localStorage.getItem('todos');\\n    return storedTodos ? JSON.parse(storedTodos) : [];\\n  });\\n\\n  useEffect(() => {\\n    localStorage.setItem('todos', JSON.stringify(todos));\\n  }, [todos]);\\n\\n  const addTodo = (text) => {\\n    setTodos([...todos, { id: Date.now(), text, completed: false, createdAt: new Date() }]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTodos(todos.map(todo => todo.id === id ? { ...todo, completed: !todo.completed } : todo));\\n  };\\n\\n  const deleteTodo = (id) => {\\n    setTodos(todos.filter(todo => todo.id !== id));\\n  };\\n\\n  const editTodo = (id, newText) => {\\n    setTodos(todos.map(todo => todo.id === id ? { ...todo, text: newText } : todo));\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12\\\">\\n      <div className=\\\"relative py-3 sm:max-w-xl sm:mx-auto\\\">\\n        <div className=\\\"absolute inset-0 bg-gradient-to-r from-blue-300 to-blue-600 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl\\\"></div>\\n        <div className=\\\"relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20\\\">\\n          <div className=\\\"max-w-md mx-auto\\\">\\n            <div>\\n              <h1 className=\\\"text-2xl font-semibold\\\">My Todos üìù</h1>\\n            </div>\\n            <div className=\\\"divide-y divide-gray-200\\\">\\n              <TodoForm addTodo={addTodo} />\\n              <TodoList\\n                todos={todos}\\n                toggleComplete={toggleComplete}\\n                deleteTodo={deleteTodo}\\n                editTodo={editTodo}\\n              />\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/TodoForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction TodoForm({ addTodo }) {\\n  const [text, setText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim()) {\\n      addTodo(text);\\n      setText('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"py-4\\\">\\n      <div className=\\\"flex rounded-md shadow-sm\\\">\\n        <input\\n          type=\\\"text\\\"\\n          className=\\\"flex-1 focus:ring-blue-500 focus:border-blue-500 block w-full min-w-0 rounded-none rounded-l-md sm:text-sm border-gray-300\\\"\\n          placeholder=\\\"Add a new todo...\\\"\\n          value={text}\\n          onChange={(e) => setText(e.target.value)}\\n        />\\n        <button\\n          type=\\\"submit\\\"\\n          className=\\\"inline-flex items-center px-4 py-2 border border-transparent rounded-r-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\\\"\\n        >\\n          <Plus className=\\\"h-5 w-5 mr-2\\\" />\\n          Add\\n        </button>\\n      </div>\\n    </form>\\n  );\\n}\\n\\nexport default TodoForm;\"\n    },\n    \"/components/TodoList.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoItem from './TodoItem';\\n\\nfunction TodoList({ todos, toggleComplete, deleteTodo, editTodo }) {\\n  return (\\n    <ul className=\\\"divide-y divide-gray-200\\\">\\n      {todos.map((todo) => (\\n        <TodoItem\\n          key={todo.id}\\n          todo={todo}\\n          toggleComplete={toggleComplete}\\n          deleteTodo={deleteTodo}\\n          editTodo={editTodo}\\n        />\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TodoList;\"\n    },\n    \"/components/TodoItem.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction TodoItem({ todo, toggleComplete, deleteTodo, editTodo }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(todo.text);\\n\\n  const handleEdit = () => {\\n    if (editText.trim()) {\\n      editTodo(todo.id, editText);\\n      setIsEditing(false);\\n    }\\n  };\\n\\n  return (\\n    <li className=\\\"py-4 flex justify-between items-center\\\">\\n      {isEditing ? (\\n        <div className=\\\"flex-1 flex items-center\\\">\\n          <input\\n            type=\\\"text\\\"\\n            className=\\\"flex-1 focus:ring-blue-500 focus:border-blue-500 block w-full min-w-0 rounded-none rounded-l-md sm:text-sm border-gray-300 mr-2\\\"\\n            value={editText}\\n            onChange={(e) => setEditText(e.target.value)}\\n          />\\n          <button onClick={handleEdit} className=\\\"px-4 py-2 rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 mr-2\\\">Save</button>\\n          <button onClick={() => setIsEditing(false)} className=\\\"px-4 py-2 rounded-md text-sm font-medium text-gray-700 bg-gray-200 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\\\">Cancel</button>\\n        </div>\\n      ) : (\\n        <div className=\\\"flex-1 flex items-center\\\">\\n          <input\\n            type=\\\"checkbox\\\"\\n            className=\\\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mr-2\\\"\\n            checked={todo.completed}\\n            onChange={() => toggleComplete(todo.id)}\\n          />\\n          <span className={`text-sm ${todo.completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>\\n            {todo.text}\\n          </span>\\n        </div>\\n      )}\\n      <div>\\n        {!isEditing && (\\n          <span className=\\\"text-gray-500 text-xs mr-2\\\">Created at: {format(todo.createdAt, 'MMM dd, yyyy')}</span>\\n        )}\\n        {!isEditing && (\\n          <button onClick={() => setIsEditing(true)} className=\\\"inline-flex items-center p-2 border border-transparent rounded-full shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 mr-2\\\">\\n            <Edit className=\\\"h-4 w-4\\\" />\\n          </button>\\n        )}\\n        <button onClick={() => deleteTodo(todo.id)} className=\\\"inline-flex items-center p-2 border border-transparent rounded-full shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\\\">\\n          <Trash className=\\\"h-4 w-4\\\" />\\n        </button>\\n      </div>\\n    </li>\\n  );\\n}\\n\\nexport default TodoItem;\"\n    },\n    \"/App.css\":{\n      \"code\":\".line-through {\\n  text-decoration: line-through;\\n  color: #a0aec0; /* Equivalent to gray-500 in Tailwind */\\n}\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoForm.js\",\n    \"/components/TodoList.js\",\n    \"/components/TodoItem.js\",\n    \"/App.css\"\n  ]\n}\n```"},
      ],
    },
  ]
})

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());